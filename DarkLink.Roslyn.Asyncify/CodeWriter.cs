using System;
using System.CodeDom.Compiler;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace DarkLink.Roslyn.Asyncify;

internal class CodeWriter : IDisposable
{
    private readonly AsyncifyInfo info;

    private readonly StringWriter stringWriter;

    private readonly IndentedTextWriter writer;

    public CodeWriter(AsyncifyInfo info)
    {
        this.info = info;
        stringWriter = new StringWriter();
        writer = new IndentedTextWriter(stringWriter);
    }

    public void Dispose()
    {
        writer.Dispose();
        stringWriter.Dispose();
    }

    private IDisposable Reset()
    {
        var originalIndent = writer.Indent;
        writer.Indent = 0;
        return Disposable.Create(() => writer.Indent = originalIndent);
    }

    private static string SanitizeIdentifier(string identifier)
        => SyntaxFacts.GetKeywordKind(identifier) != SyntaxKind.None || SyntaxFacts.GetContextualKeywordKind(identifier) != SyntaxKind.None
            ? $"@{identifier}"
            : identifier;

    private IDisposable Scope()
    {
        writer.Indent++;
        return Disposable.Create(() => writer.Indent--);
    }

    public override string ToString() => stringWriter.ToString();

    public void Write()
    {
        writer.WriteLine("// <auto-generated />");
        writer.WriteLine();
        writer.WriteLine("using System;");
        writer.WriteLine("using System.Threading.Tasks;");
        writer.WriteLine();
        writer.WriteLine($"partial class {info.ExtensionType.Name}");
        writer.WriteLine("{");

        using (Scope())
        {
            WriteMethod();
        }

        writer.WriteLine("}");
    }

    private void WriteMethod()
    {
        writer.WriteLine($"public static async Task {info.Method.Name}(this Task<{info.Method.ContainingType.ToDisplayString()}> ___this{FormatParameters()})");

        using (Scope())
        {
            writer.WriteLine($"=> (await ___this).{info.Method.Name}({FormatArguments()});");
        }

        string FormatParameters() => string.Concat(info.Method.Parameters.Select(p => $", {FormatParameter(p)}"));

        string FormatArguments() => string.Join(", ", info.Method.Parameters.Select(FormatArgument));

        string FormatArgument(IParameterSymbol parameter) => SanitizeIdentifier(parameter.Name);

        string FormatParameter(IParameterSymbol parameter)
        {
            var parameterString = $"{parameter.Type.ToDisplayString()} {SanitizeIdentifier(parameter.Name)}";
            if (parameter.HasExplicitDefaultValue)
                parameterString += $" = \"{parameter.ExplicitDefaultValue}\"";
            return parameterString;
        }
    }
}
